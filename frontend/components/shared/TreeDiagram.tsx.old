// components/TreeDiagram.tsx
import React from "react";

interface Topic {
  name: string;
  content: string;
  children: Topic[];
}

interface TreeNodeProps {
  topic: Topic;
  x: number;
  y: number;
}

interface TreePathProps {
  fromX: number;
  fromY: number;
  toX: number;
  toY: number;
}

const nodeWidth = 200;
const nodeHeight = 50;
const verticalSpacing = 100;
const horizontalSpacing = 40;

const TreeNode: React.FC<TreeNodeProps> = ({ topic, x, y }) => (
  <g transform={`translate(${x}, ${y})`}>
    <rect
      width={nodeWidth}
      height={nodeHeight}
      rx="2"
      fill="rgb(255,255,0)"
      stroke="rgb(0,0,0)"
      strokeWidth="2.7"
    />
    <text
      x={nodeWidth / 2}
      y={nodeHeight / 2}
      alignmentBaseline="middle"
      textAnchor="middle"
      fill="rgb(0,0,0)"
      fontSize="17px"
    >
      {topic.name}
    </text>
  </g>
);

const TreePath: React.FC<TreePathProps> = ({ fromX, fromY, toX, toY }) => {
  const controlPointX = (fromX + toX) / 2;
  const controlPointY = fromY;

  return (
    <path
      d={`M${fromX},${fromY} Q${controlPointX},${controlPointY} ${toX},${toY}`}
      fill="none"
      stroke="rgb(43,120,228)"
      strokeWidth="4"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  );
};

const renderTree = (topic: Topic, x: number, y: number): React.ReactNode => {
  const children = topic.children || [];
  const childY = y + nodeHeight + verticalSpacing;
  const childXStart =
    x - ((children.length - 1) * (nodeWidth + horizontalSpacing)) / 2;

  return (
    <g key={topic.name}>
      <TreeNode topic={topic} x={x} y={y} />
      {children.map((child, index) => {
        const childX = childXStart + index * (nodeWidth + horizontalSpacing);
        return (
          <g key={child.name}>
            <TreePath
              fromX={x + nodeWidth / 2}
              fromY={y + nodeHeight}
              toX={childX + nodeWidth / 2}
              toY={childY}
            />
            {renderTree(child, childX, childY)}
          </g>
        );
      })}
    </g>
  );
};

interface TreeDiagramProps {
  rootTopic: Topic;
}

const TreeDiagram: React.FC<TreeDiagramProps> = ({ rootTopic }) => {
  const startX =
    typeof window !== "undefined" ? window.innerWidth / 2 - nodeWidth / 2 : 0;
  const startY = 20;

  return (
    <svg width="100%" height="100vh" xmlns="http://www.w3.org/2000/svg">
      {renderTree(rootTopic, startX, startY)}
    </svg>
  );
};

export default TreeDiagram;
